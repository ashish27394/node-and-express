*node is js framework
1)server side
2)open source
3)Cross Platform
4)Javascript is awesome

*Dealing with node versions
For specific project we might need specific version of node
For that we can use node version manager(nvm)
nvm-windows

*npmrc is the cofiguration file for npm
like install the exact version

************** module 2 finished *****************
************** module 3*****************

--------------
*debugging node js
*chalk - chalk provides different color for different results
like green for build successful,
red for unsuccessful build and etc....

*debug - debug can be worked as an alternative to console.log
The difference between debug and console.log is that debug will only 
work in debug mode and not in production mode.

To run debug for specific file we have to import it that file and say that where we are
var debug = require('debug')('app');
Here we are saying we are in 'app' file.
So debug will show the message like 
ex --> app <whatever msg>

express also uses debug so debug will also return the express if it present.

To run in debug mode 
command in windows is --> set DEBUG=* & node app.js
Here * means it will debug everything and show lot of messages in the console 
You can specify the file you want to debug in place of * to remove the unnecessary noice(results)
from the debug package in the console
ex - set DEBUG=app & node app.js

*morgan - morgan will track all the request for the website
i.e. traffic tracking
It will give you info about from where request generated
express is using morgan as a middleware
app.use(morgan('combined')); --> For detailed info
app.use(morgan('tiny')); --> For small info
,etc and many more
----------------

*Serving Index
Use sendFile for fetching the html package

use path for making the application route enviroment less
like for path in windows we use forward slash
and in linux we use backward slash
With path we do not need to give slashes and we can use comma 

*Putting static css and js files into different folders
how to access
Use exptress js pipeline to make it accessible to the project
ex - app.use(express.static(path.join(__dirname, '/public/')));
Here we are making public directory accesible to the project
then in html we can just go from after the public like
ex - 'css/css/bootstrap.min.css'

*The above process will not work if we want to upgrade the package 
b/c first we will upgrade the package and copy paste after that every time 
so instead of that we should load from that directly

so here we are again using the express middleware to defines paths
Here '/css' means it will find for the "css/<path>" to load something 
Here '/js' means it will find for the "js/<path>" to load something 
preference will be given in the order define in app.js

note : popper is not loading , need to fix

****************module 3 fineshed ******************